//
//  TimelinePresenter.swift
//  SwiftTwitter
//
//  Created by Matheus Lima on 15/04/19.
//  Copyright (c) 2019 Matheus Lima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TimelinePresentationLogic {
    func presentUser(response: Timeline.GetUser.Response)
    func presentUserTimeline(response: Timeline.FetchUserTimeline.Response)
    func presentUserTimeline(error: TweetsStoreError)
    func presentLoading(isActive: Bool)
}

class TimelinePresenter: TimelinePresentationLogic {
    weak var viewController: TimelineDisplayLogic?
    
    let inDateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = Constants.DateFormat.Twitter
        return dateFormatter
    }()
    
    let outDateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMM YYYY"
        return dateFormatter
    }()
    
    let numberFormater: NumberFormatter = {
        let numberFormater = NumberFormatter()
        numberFormater.groupingSeparator = "."
        numberFormater.numberStyle = .decimal
        return numberFormater
    }()
    
    // MARK: - Present methods
    
    func presentUser(response: Timeline.GetUser.Response) {
        let viewModel = Timeline.GetUser.ViewModel(displayedUser: make(user: response.user))
        viewController?.displayUser(viewModel: viewModel)
    }
    
    func presentUserTimeline(response: Timeline.FetchUserTimeline.Response) {
        let displayedTweets = response.tweets.map({ make(tweet: $0) })
        let viewModel = Timeline.FetchUserTimeline.ViewModel(
            displayedTweets: displayedTweets,
            error: nil
        )
        
        viewController?.displayUserTimeline(viewModel: viewModel)
    }
    
    func presentUserTimeline(error: TweetsStoreError) {
        let viewModel = Timeline.FetchUserTimeline.ViewModel(
            displayedTweets: nil,
            error: error.message
        )
        viewController?.displayUserTimelineError(viewModel: viewModel)
    }
    
    func presentLoading(isActive: Bool) {
        isActive ? nil : viewController?.stopLoading()
    }
}


// MARK: - Convenience Methods

extension TimelinePresenter {
    private func make(tweet: Tweet) -> Timeline.FetchUserTimeline.ViewModel.DisplayedTweet {
        let displayedTweet = Timeline.FetchUserTimeline.ViewModel.DisplayedTweet(
            authorName: tweet.user.name ?? "",
            authorUsername: "@\(tweet.user.username ?? "")",
            authorProfileImageUrl: URL(string: tweet.user.profileImageURL ?? ""),
            replyToUsername: format(replyToUsername: tweet.replyToUsername),
            text: tweet.fullText ?? "",
            date: format(date: tweet.createdAt),
            retweetCount: format(count: tweet.retweetCount),
            favoriteCount: format(count: tweet.favoriteCount),
            replyCount: format(count: tweet.replyCount)
        )
        
        return displayedTweet
    }
    
    func make(user: User) -> Timeline.GetUser.ViewModel.DisplayedUser {
        let displayedUser = Timeline.GetUser.ViewModel.DisplayedUser(
            id: user.id ?? "",
            name: user.name ?? "",
            username: "@\(user.username ?? "")",
            description: user.description ?? "",
            profileBackgroundColor: format(profileColor: user.profileBackgroundColor),
            location: user.location ?? "",
            avatarURL: URL(string: user.profileImageURL ?? ""),
            coverURL: URL(string: user.bannerImageURL ?? ""),
            followersCount: format(count: user.followersCount, emptyString: "0"),
            followingCount: format(count: user.friendsCount, emptyString: "0"),
            tweetsCount: format(tweetsCount: user.statusesCount),
            joinedDate: format(joinedDate: user.createdAt)
        )
        
        return displayedUser
    }
    
    private func format(replyToUsername: String?) -> NSMutableAttributedString {
        if let replyToUsername = replyToUsername {
            let attributedText = NSMutableAttributedString(string: "Replying to @\(replyToUsername)")
            
            attributedText.addAttribute(
                .foregroundColor,
                value: UIColor(named: "Primary") ?? .blue,
                range: NSRange(location: 12, length: replyToUsername.count + 1)
            )
            
            return attributedText
        }
        return NSMutableAttributedString.init(string: "")
    }
    
    private func format(tweetsCount: Int?) -> String {
        if let tweetsCount = tweetsCount, tweetsCount > 0 {
            if let numberFormatted = numberFormater.string(from: tweetsCount as NSNumber) {
                return "\(numberFormatted) Tweets"
            }
        }
        return "0 Tweets"
    }
    
    private func format(profileColor: String?) -> UIColor {
        guard let profileColor = profileColor else {
            return UIColor(named: "LightGray") ?? .gray
        }
        
        return UIColor.init(hex: profileColor)
    }
    
    private func format(count: Int?, emptyString: String = "") -> String {
        if let count = count, count > 0 {
            return numberFormater.string(from: count as NSNumber) ?? emptyString
        }
        return emptyString
    }
    
    private func format(date: String?) -> String {
        return inDateFormatter.date(from: date ?? "")?.timeAgoDisplay() ?? ""
    }
    
    private func format(joinedDate: String?) -> String {
        guard let joinedDate = joinedDate, let dateFormatted = inDateFormatter.date(from: joinedDate) else {
            return "Unavailable"
        }
        
        return "Joined \(outDateFormatter.string(from: dateFormatted))"
    }
}
