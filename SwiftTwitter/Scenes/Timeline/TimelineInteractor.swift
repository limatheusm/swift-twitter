//
//  TimelineInteractor.swift
//  SwiftTwitter
//
//  Created by Matheus Lima on 15/04/19.
//  Copyright (c) 2019 Matheus Lima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TimelineBusinessLogic {
    func getUser(request: Timeline.GetUser.Request)
    func fetchUserTimeline(request: Timeline.FetchUserTimeline.Request)
    func refreshUserTimeline()
}

protocol TimelineDataStore {
    var tweets: [Tweet]? { get }
    var user: User? { get set }
}

class TimelineInteractor: TimelineBusinessLogic, TimelineDataStore {
    var user: User?
    var tweets: [Tweet]?
    
    var presenter: TimelinePresentationLogic?
    var worker = TweetsWorker(tweetsStore: TwitterAPI())
    
    // MARK: - Get user
    
    func getUser(request: Timeline.GetUser.Request) {
        guard let user = user else { return }
        let response = Timeline.GetUser.Response(user: user)
        
        presenter?.presentUser(response: response)
    }
    
    // MARK: - Fetch User Timeline
    
    func fetchUserTimeline(request: Timeline.FetchUserTimeline.Request) {
        presenter?.presentLoading(isActive: true)
        
        guard let user = user, let userID = user.id else {
            presenter?.presentLoading(isActive: false)
            presenter?.presentUserTimeline(error: .CannotFetch("User is not found"))
            return
        }
        
        worker.fetchUserTimeline(forUserID: userID, completionHandler: { (results) in
            switch results {
            case .Failure(let error):
                self.presenter?.presentUserTimeline(error: error)
            case .Success(let tweets):
                self.tweets = tweets
                let response = Timeline.FetchUserTimeline.Response(tweets: tweets)
                self.presenter?.presentUserTimeline(response: response)
            }
            self.presenter?.presentLoading(isActive: false)
        })
    }
    
    // MARK: - Refresh UserTimeline
    
    func refreshUserTimeline() {
        presenter?.presentLoading(isActive: true)

        guard let user = user, let userID = user.id else {
            presenter?.presentLoading(isActive: false)
            presenter?.presentUserTimeline(error: .CannotFetch("User is not found"))
            return
        }

        worker.fetchUserTimeline(forUserID: userID, completionHandler: { (results) in
            switch results {
            case .Failure(let error):
                self.presenter?.presentUserTimeline(error: error)
            case .Success(let tweets):
                self.tweets = tweets
                let response = Timeline.FetchUserTimeline.Response(tweets: tweets)
                self.presenter?.presentUserTimeline(response: response)
            }
            self.presenter?.presentLoading(isActive: false)
        })
    }
}
