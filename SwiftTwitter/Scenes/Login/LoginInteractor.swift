//
//  LoginInteractor.swift
//  SwiftTwitter
//
//  Created by Matheus Lima on 02/05/19.
//  Copyright (c) 2019 Matheus Lima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Swifter

protocol LoginBusinessLogic {
    func login(request: Login.OAuth.Request)
}

protocol LoginDataStore {
    var userID: String? { get }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    let worker = TweetsWorker(tweetsStore: TwitterAPI())
    var presenter: LoginPresentationLogic?
    
    var userID: String?
    
    func login(request: Login.OAuth.Request) {
        worker.loginAuth { [weak self] result in
            switch result {
            case .Failure(let error):
                let response = Login.OAuth.Response(error: error, userID: nil)
                self?.presenter?.presentLoginFailure(response: response)
            case .Success(let result):
                self?.userID = result.userID
                self?.storeAccessToken(accessToken: result)
                let response = Login.OAuth.Response(error: nil, userID: result.userID)
                self?.presenter?.presentLoginSuccess(response: response)
            }
        }
    }
}

// MARK: - Convenience Methods

extension LoginInteractor {
    private func storeAccessToken(accessToken: Credential.OAuthAccessToken) {
        UserDefaults.standard.set(accessToken.key, forKey: Constants.TwitterAPI.UserDefaults.OAuthTokenKey)
        UserDefaults.standard.set(accessToken.secret, forKey: Constants.TwitterAPI.UserDefaults.OAuthSecretKey)
    }
}
