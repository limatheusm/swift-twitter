//
//  LoginViewController.swift
//  SwiftTwitter
//
//  Created by Matheus Lima on 02/05/19.
//  Copyright (c) 2019 Matheus Lima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func displayLoginSuccess(viewModel: Login.OAuth.ViewModel)
    func displayError(viewModel: Login.OAuth.ViewModel)
}

class LoginViewController: UIViewController {
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    @IBAction func loginAction(_ sender: Any) {
        login()
    }
    
    func login() {
        let request = Login.OAuth.Request()
        interactor?.login(request: request)
    }
}

extension LoginViewController: LoginDisplayLogic {
    func displayError(viewModel: Login.OAuth.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        showInfo(withTitle: "Ops!", withMessage: errorMessage)
    }
    
    func displayLoginSuccess(viewModel: Login.OAuth.ViewModel) {
        router?.routeToSearch()
    }
}
