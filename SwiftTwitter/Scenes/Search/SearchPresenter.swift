//
//  SearchPresenter.swift
//  SwiftTwitter
//
//  Created by Matheus Lima on 11/04/19.
//  Copyright (c) 2019 Matheus Lima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchPresentationLogic {
    func presentSearchedTweets(response: Search.SearchTweets.Response)
    func presentSearchedTweets(error: TweetsStoreError)
    func presentLoading(isActive: Bool)
}

class SearchPresenter: SearchPresentationLogic {
    weak var viewController: SearchDisplayLogic?
    
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = Constants.DateFormat.Twitter
        return dateFormatter
    }()
    
    let numberFormater: NumberFormatter = {
        let numberFormater = NumberFormatter()
        numberFormater.groupingSeparator = "."
        numberFormater.numberStyle = .decimal
        return numberFormater
    }()
    
    func presentLoading(isActive: Bool) {
        isActive
            ? viewController?.startLoading()
            : viewController?.stopLoading()
    }
    
    // MARK: - Search tweets
    
    func presentSearchedTweets(response: Search.SearchTweets.Response) {
        let displayedTweets = response.tweets.map({ make(tweet: $0) })
        let viewModel = Search.SearchTweets.ViewModel(
            displayedTweets: displayedTweets,
            error: nil
        )
        
        viewController?.displaySearchedTweets(viewModel: viewModel)
    }
    
    func presentSearchedTweets(error: TweetsStoreError) {
        let viewModel = Search.SearchTweets.ViewModel(
            displayedTweets: nil,
            error: error.message
        )
    
        viewController?.displaySearchedTweetsError(viewModel: viewModel)
    }
    
    // MARK: - Convenience methods
    
    private func make(tweet: Tweet) -> Search.SearchTweets.ViewModel.DisplayedTweet {
        let displayedTweet = Search.SearchTweets.ViewModel.DisplayedTweet(
            authorName: tweet.user.name ?? "",
            authorUsername: "@\(tweet.user.username ?? "")",
            authorProfileImageUrl: URL(string: tweet.user.profileImageURL ?? ""),
            replyToUsername: format(replyToUsername: tweet.replyToUsername),
            text: tweet.fullText ?? "",
            date: format(date: tweet.createdAt),
            retweetCount: format(count: tweet.retweetCount),
            favoriteCount: format(count: tweet.favoriteCount),
            replyCount: format(count: tweet.replyCount)
        )
        
        return displayedTweet
    }
    
    private func format(date: String?) -> String {
        return dateFormatter.date(from: date ?? "")?.timeAgoDisplay() ?? ""
    }
    
    private func format(replyToUsername: String?) -> NSMutableAttributedString {
        if let replyToUsername = replyToUsername {
            let attributedText = NSMutableAttributedString(string: "Replying to @\(replyToUsername)")

            attributedText.addAttribute(
                .foregroundColor,
                value: UIColor(named: "Primary") ?? .blue,
                range: NSRange(location: 12, length: replyToUsername.count + 1)
            )

            return attributedText
        }
        return NSMutableAttributedString.init(string: "")
    }
    
    private func format(count: Int?) -> String {
        if let count = count, count > 0 {
            return numberFormater.string(from: count as NSNumber) ?? ""
        }
        return ""
    }
}
