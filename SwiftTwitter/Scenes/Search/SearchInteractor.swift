//
//  SearchInteractor.swift
//  SwiftTwitter
//
//  Created by Matheus Lima on 11/04/19.
//  Copyright (c) 2019 Matheus Lima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchBusinessLogic {
    func searchTweets(request: Search.SearchTweets.Request)
    func refreshTweets()
}

protocol SearchDataStore {
    var searchText: String? { get }
    var tweets: [Tweet]? { get }
}

class SearchInteractor: SearchBusinessLogic, SearchDataStore {
    var presenter: SearchPresentationLogic?
    var worker = TweetsWorker(tweetsStore: TwitterAPI())

    var tweets: [Tweet]?
    var searchText: String?
    
    // MARK: - Search tweets
    
    func searchTweets(request: Search.SearchTweets.Request) {
        presenter?.presentLoading(isActive: true)
        searchText = request.searchText
        
        worker.searchTweets(using: request.searchText) { (result) in
            CATransaction.begin()
            CATransaction.setCompletionBlock { () -> Void in
                /* wait for endRefreshing animation to complete
                 before reloadData so table view does not flicker to top
                 then continue endRefreshing animation */
                switch result {
                case .Failure(let error):
                    self.presenter?.presentSearchedTweets(error: error)
                case .Success(let tweets):
                    self.tweets = tweets
                    let response = Search.SearchTweets.Response(tweets: tweets)
                    self.presenter?.presentSearchedTweets(response: response)
                }
            }
            self.presenter?.presentLoading(isActive: false)
            CATransaction.commit()
        }
    }
    
    // MARK: - Refresh Tweets
    
    func refreshTweets() {
        presenter?.presentLoading(isActive: true)
        guard let searchText = searchText else {
            presenter?.presentLoading(isActive: false)
            return
        }
        
        worker.searchTweets(using: searchText) { (result) in
            CATransaction.begin()
            CATransaction.setCompletionBlock { () -> Void in
                /* wait for endRefreshing animation to complete
                 before reloadData so table view does not flicker to top
                 then continue endRefreshing animation */
                switch result {
                case .Failure(let error):
                    self.presenter?.presentSearchedTweets(error: error)
                case .Success(let tweets):
                    self.tweets = tweets
                    let response = Search.SearchTweets.Response(tweets: tweets)
                    self.presenter?.presentSearchedTweets(response: response)
                }
            }
            self.presenter?.presentLoading(isActive: false)
            CATransaction.commit()
        }
    }
}
